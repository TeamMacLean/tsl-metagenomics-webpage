---
format:
  html:
    smooth-scroll: true
    highlight-style: github 
    embed-resources: true
    code-overflow: scroll
    code-block-background: true
---

# Exploring Taxonomy {#sec-07-exploring-taxonomy}

::: {.callout-note icon="false"}
## Time

-   Teaching: 20 min
-   Exercises: 5 min
:::

::: {.callout-tip icon="false"}
## Questions

-   How can I use my taxonomic assignment results to explore taxonomy?
:::

::: {.callout-warning icon="false"}
## Objectives

-   Comprehend which libraries are required for analysis of the taxonomy of metagenomes.
-   Create and manage a Phyloseq object.
:::

## Creating lineage and rank tables

In this section, we will use RStudio to analyze our microbial samples. You do not have to install anything, you already have RStudio installed at your workstation.

Packages like Qiime2, MEGAN, Vegan, or Phyloseq in R allow us to analyze diversity and abundance by manipulating taxonomic assignment data. In this lesson, we will use Phyloseq. In order to do so, we need to generate an abundance matrix from the Kraken output files. One program widely used for this purpose is **Kraken-biom**.

### Kraken-biom

[Kraken-biom](https://github.com/smdabdoub/kraken-biom) is a program that creates BIOM tables from the Kraken output.

In order to run Kraken-biom, we need a specific output from Kraken: the `.reports`.

Using Kraken-biom, we will create a table in [Biom](https://biom-format.org/) format. For the purposes of this section, we will use all 3 samples per condition, e.g. B_Sample_97, B_Sample_98 and B_Sample_99 to enable us to do some specific analyses later on.

We will do this step in Galaxy. Therefore, to run Kraken-biom, select the 3 reports, associated with each sample and check the **Output Format** is set to `Biom2 (HDF5)`.

Once Kraken-biom is complete, you will have a new object in the history tab called **Kraken-biom output file**. This is our `biom` object and contains both the abundance as well as the ID (a number) of each OTU. With this result, we can now being working with **Phyloseq** and begin to manipulate our taxonomic-data.

## Creating and manipulating Phyloseq objects

### Load required packages

We are now going to start working with R to further explore our taxonomy.

Phyloseq is a library with tools to analyze and plot your metagenomics samples' taxonomic assignment and abundance information.

As [phyloseq](https://joey711.github.io/phyloseq/) is already installed, we can load the library which makes the software available for this R session. Now load the libraries (a process needed every time we begin a new work session in R):

::: {style="background-color: rgb(234, 237, 237);"}
```         
> library("phyloseq")
> library("ggplot2")
> library("RColorBrewer")
> library("patchwork")
```
:::

### Creating the phyloseq object

First, we tell R in which directory we are working.

::: {style="background-color: rgb(234, 237, 237);"}
```         
> setwd("\~/dc_workshop/taxonomy/")
```
:::

Let us proceed to create the phyloseq object. Download the `biom` file we generated in Galaxy and then import with the `import_biom` command:

::: {style="background-color: rgb(234, 237, 237);"}
```         
> merged_metagenomes <- import_biom("cuatroc.biom")
```
:::

Now, we can inspect the result by asking the class of the object created and doing a close inspection of some of its content:

::: {style="background-color: rgb(234, 237, 237);"}
```         
> class(merged_metagenomes)

[1] "phyloseq"
attr(,"package")
[1] "phyloseq"
```
:::

The "class" command indicates that we already have our phyloseq object.

### Exploring the taxonomic labels

Let us try to access the data that is stored inside our `merged_metagenomes` object. Since a phyloseq object is a special object in R, we need to use the operator `@` to explore the subsections of data inside `merged_metagenomes`. If we type `merged_metagenomes@`, five options are displayed; `tax_table` and `otu_table` are the ones we will use. After writing `merged_metagenomes@otu_table` or `merged_metagenomes@tax_table`, an option of `.Data` will be the one chosen in both cases. Let us see what is inside our `tax_table`:

::: {style="background-color: rgb(234, 237, 237);"}
```         
> View(merged_metagenomes\@tax_table\@.Data)
```
:::

![Table of taxonomic labels in the `merged_metagenomes` object](fig/07-01.png)

Here we can see that the `tax_table` inside our phyloseq object stores all the taxonomic labels corresponding to each OTU. Numbers in the row names of the table identify OTUs.

Next, let us get rid of some of the unnecessary characters in the OTUs id and put names to the taxonomic ranks:

To remove unnecessary characters in `.Data` (matrix), we will use the command `substring()`. This command helps extract or replace characters in a vector. 
To use the command, we have to indicate the vector (x) followed by the first element to replace or extract (first) and the last element to be replaced (last). 
For instance: `substring (x, first, last)`. `substring()` is a "flexible" command, especially to select characters of different lengths, as in our case. 
Therefore, it is not necessary to indicate "last", so it will take the last position of the character by default. Since a matrix is an arrangement of vectors, we can use this command. 
Each character in `.Data` is preceded by three spaces occupied by a letter and two underscores, for example: `o__Rhodobacterales`. In this case, "Rodobacterales" starts at position 4 with an R. 
So, to remove the unnecessary characters, we will use the following code:

::: {style="background-color: rgb(234, 237, 237);"}
```         
> merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4)
> colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
```
:::


![Table of taxonomic labels in the `merged_metagenomes` object with corrections](fig/07-02.png)

We will use a command named `unique()` to explore how many phyla we have. Let us see the result we obtain from the following code: 

::: {style="background-color: rgb(234, 237, 237);"}
```
> unique(merged_metagenomes@tax_table@.Data[,"Phylum"]) 
 [1] "Proteobacteria"         "Actinobacteriota"      
 [3] "Patescibacteria"        "Bacteroidota"          
 [5] "Deinococcota"           "Chloroflexi"           
 [7] "Abditibacteriota"       "Armatimonadota"        
 [9] "Myxococcota"            "Firmicutes"            
[11] "Bdellovibrionota"       "Gemmatimonadota"       
[13] "Acidobacteriota"        "Cyanobacteria"         
[15] "Verrucomicrobiota"      "Nitrospirota"          
[17] "Synergistota"           "Latescibacterota"      
[19] "Elusimicrobiota"        "Fibrobacterota"        
[21] "Planctomycetota"        "Spirochaetota"         
[23] "Desulfobacterota"       "Campylobacterota"      
[25] "Dependentiae"           "Thermosulfidibacterota"
[27] "Fusobacteriota"         "Deferribacterota"      
[29] "Dadabacteria"           "Phragmoplastophyta"  

```
:::

Knowing phyla is helpful, but what we need to know is how many of our OTUs have been assigned to the phylum Firmicutes?. Let´s use the command `sum()` to ask R:

::: {style="background-color: rgb(234, 237, 237);"}
```
> sum(merged_metagenomes@tax_table@.Data[,"Phylum"] == "Firmicutes")
[1] 48
```
:::

Now, to know for that phylum in particular which taxa there are in a certain rank, we can also ask it to phyloseq. 

::: {style="background-color: rgb(234, 237, 237);"}
```
> unique(merged_metagenomes@tax_table@.Data[merged_metagenomes@tax_table@.Data[,"Phylum"] == "Firmicutes", "Class"]) 
[1] "Bacilli"          "Clostridia"       "Symbiobacteriia" 
[4] "Desulfotomaculia"
```
:::

### Exploring the abundance table

Until now, we have looked at the part of the phyloseq object that stores the information about the taxonomy (at all the possible levels) of each OTU found in our samples. 
However, there is also a part of the phyloseq object that stores the information about how many sequenced reads corresponding to a certain OTU are in each sample. This table is the `otu_table`.

::: {style="background-color: rgb(234, 237, 237);"}
```         
> View(merged_metagenomes@otu_table@.Data)

```
:::

![Table of abundance of reads in the `merged_metagenomes` object](fig/07-03.png)


We will take advantage of this information later on in our analyses.

::: {.callout-warning icon="false"}
## Phyloseq objects

Finally, we can review our object and see that all datasets (i.e., B_Sample_97, B_Sample_98 and B_Sample_99 or B_Sample_106, B_Sample_107 and B_Sample_108) are in the object. 
If you look at our Phyloseq object, you will see that there are more data types that we can use to build our object(`?phyloseq()`), such as a phylogenetic tree and metadata concerning our samples. 
These are optional, so we will use our basic phyloseq object, composed of the abundances of specific OTUs and the names of those OTUs.
:::

::: {.callout-tip icon="false"}
## Exercise 1: Explore a phylum

Go into groups and choose one phylum that is interesting for your group, and use the learned code to find out how many OTUs have been assigned to your chosen phylum and what are the unique names of the genera inside it. 
がんばって! (ganbatte; *good luck*): 
:::

::: {.callout-tip collapse="true" icon="false"}
## Solution 

Change the name of a new phylum wherever needed and the name of the rank we are asking for to get the result. 
As an example, here is the solution for Proteobacteria: 

::: {style="background-color: rgb(234, 237, 237);"}
```
> sum(merged_metagenomes@tax_table@.Data[,"Phylum"] == "Actinobacteriota")
[1] 177

unique(merged_metagenomes@tax_table@.Data[merged_metagenomes@tax_table@.Data[,"Phylum"] == "Actinobacteriota", "Genus"]) 
```
:::
:::

::: {.callout-tip icon="false"}
## Exercise 2: Searching for the read counts

Using the information from both the `tax_table` and the `otu_table`, find how many reads there are for any genus of your interest (one that can be found in the `tax_table`).\
**Hint**: Remember that you can access the contents of a data frame with the `["row_name", "column_name"]` syntax.\
がんばって! (ganbatte; *good luck*): 

:::

::: {.callout-tip collapse="true" icon="false"}
## Solution

Go to the `tax_table`:

::: {style="background-color: rgb(234, 237, 237);"}
```
 View(merged_metagenomes@tax_table@.Data) 
```
:::

Take note of the OTU number for some genus:

![The row of the `tax_table` corresponds to the species *Rhodococcus*](fig/07-04.png)

Search for the row of the `otu_table` with the row name you chose.

::: {style="background-color: rgb(234, 237, 237);"}
```
> merged_metagenomes@otu_table@.Data["43359",]

0-kraken_report 1-kraken_report 2-kraken_report 
              6              12               7
```
:::

:::

::: {.callout-caution icon="false"}
## Keypoints

-   kraken-biom formats Kraken output-files of several samples into the single `.biom` file that will be phyloseq input.
-   The library `phyloseq` manages metagenomics objects and computes analyses.
-   A phyloseq object stores a table with the taxonomic information of each OTU and a table with the abundance of each OTU.
:::
